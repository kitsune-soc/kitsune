schema {
  query: RootQuery
  mutation: RootMutation
}

type Account {
  avatar: MediaAttachment
  createdAt: DateTime!
  displayName: String
  header: MediaAttachment
  id: UUID!
  locked: Boolean!
  note: String
  posts(after: String, before: String, first: Int, last: Int): PostConnection!
  updatedAt: DateTime!
  url: String!
  username: String!
}

enum CaptchaBackend {
  H_CAPTCHA
  M_CAPTCHA
}

type CaptchaInfo {
  backend: CaptchaBackend!
  key: String!
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

type Instance {
  captcha: CaptchaInfo
  characterLimit: Int!
  description: String!
  domain: String!
  localPostCount: Int!
  name: String!
  registrationsOpen: Boolean!
  userCount: Int!
  version: String!
}

type MediaAttachment {
  blurhash: String
  contentType: String!
  createdAt: DateTime!
  description: String
  id: UUID!
  uploader: Account!
  url: String!
}

type OAuth2Application {
  createdAt: DateTime!
  id: UUID!
  name: String!
  redirectUri: String!
  secret: String!
  updatedAt: DateTime!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Post {
  account: Account!
  attachments: [MediaAttachment!]!
  content: String!
  createdAt: DateTime!
  id: UUID!
  isSensitive: Boolean!
  subject: String
  updatedAt: DateTime!
  url: String!
  visibility: Visibility!
}

type PostConnection {
  """A list of edges."""
  edges: [PostEdge!]!

  """A list of nodes."""
  nodes: [Post!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Post!
}

type RootMutation {
  createPost(content: String!, isSensitive: Boolean!, visibility: Visibility!): Post!
  deletePost(id: UUID!): UUID!
  registerOauthApplication(name: String!, redirectUri: String!): OAuth2Application!
  registerUser(captchaToken: String, email: String!, password: String!, username: String!): User!
  updateUser(avatar: Upload, displayName: String, header: Upload, locked: Boolean, note: String): Account!
}

type RootQuery {
  getAccountById(id: UUID!): Account
  getPostById(id: UUID!): Post!
  homeTimeline(after: String, before: String, first: Int, last: Int): PostConnection!
  instance: Instance!
  myAccount: Account!
  publicTimeline(after: String, before: String, first: Int, last: Int, onlyLocal: Boolean! = true): PostConnection!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

scalar Upload

type User {
  account: Account!
  createdAt: DateTime!
  email: String!
  id: UUID!
  updatedAt: DateTime!
  username: String!
}

enum Visibility {
  FOLLOWER_ONLY
  MENTION_ONLY
  PUBLIC
  UNLISTED
}
