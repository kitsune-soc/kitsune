//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "oauth2_applications")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub secret: String,
    #[sea_orm(column_type = "Text")]
    pub redirect_uri: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::oauth2_access_tokens::Entity")]
    Oauth2AccessTokens,
    #[sea_orm(has_many = "super::oauth2_authorization_codes::Entity")]
    Oauth2AuthorizationCodes,
    #[sea_orm(has_many = "super::oauth2_refresh_tokens::Entity")]
    Oauth2RefreshTokens,
}

impl Related<super::oauth2_access_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2AccessTokens.def()
    }
}

impl Related<super::oauth2_authorization_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2AuthorizationCodes.def()
    }
}

impl Related<super::oauth2_refresh_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2RefreshTokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
