//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub account_id: Uuid,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub oidc_id: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub username: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub password: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub domain: String,
    #[sea_orm(column_type = "Text")]
    pub private_key: String,
    pub created_at: TimeDateTimeWithTimeZone,
    pub updated_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::AccountId",
        to = "super::accounts::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Accounts,
    #[sea_orm(has_many = "super::oauth2_access_tokens::Entity")]
    Oauth2AccessTokens,
    #[sea_orm(has_many = "super::oauth2_authorization_codes::Entity")]
    Oauth2AuthorizationCodes,
    #[sea_orm(has_many = "super::users_roles::Entity")]
    UsersRoles,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::oauth2_access_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2AccessTokens.def()
    }
}

impl Related<super::oauth2_authorization_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2AuthorizationCodes.def()
    }
}

impl Related<super::users_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
