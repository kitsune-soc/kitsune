//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use crate::custom::Visibility;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "posts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub account_id: Uuid,
    pub in_reply_to_id: Option<Uuid>,
    pub reposted_post_id: Option<Uuid>,
    pub is_sensitive: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub subject: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub visibility: Visibility,
    pub is_local: bool,
    #[sea_orm(column_type = "Text", unique)]
    pub url: String,
    pub created_at: TimeDateTimeWithTimeZone,
    pub updated_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::AccountId",
        to = "super::accounts::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Accounts,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::InReplyToId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::RepostedPostId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::posts_favourites::Entity")]
    PostsFavourites,
}

impl Related<super::posts_favourites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostsFavourites.def()
    }
}

impl Related<super::media_attachments::Entity> for Entity {
    fn to() -> RelationDef {
        super::posts_media_attachments::Relation::MediaAttachments.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::posts_media_attachments::Relation::Posts.def().rev())
    }
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        super::posts_mentions::Relation::Accounts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::posts_mentions::Relation::Posts.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
