//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub display_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub note: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub username: String,
    pub locked: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub domain: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub url: String,
    #[sea_orm(column_type = "Text")]
    pub followers_url: String,
    #[sea_orm(column_type = "Text")]
    pub inbox_url: String,
    #[sea_orm(column_type = "Text")]
    pub public_key: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub avatar_id: Option<Uuid>,
    pub header_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::favourites::Entity")]
    Favourites,
    #[sea_orm(
        belongs_to = "super::media_attachments::Entity",
        from = "Column::AvatarId",
        to = "super::media_attachments::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    MediaAttachments2,
    #[sea_orm(
        belongs_to = "super::media_attachments::Entity",
        from = "Column::HeaderId",
        to = "super::media_attachments::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    MediaAttachments1,
    #[sea_orm(has_many = "super::posts::Entity")]
    Posts,
    #[sea_orm(has_many = "super::reposts::Entity")]
    Reposts,
    #[sea_orm(has_one = "super::users::Entity")]
    Users,
}

impl Related<super::favourites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Favourites.def()
    }
}

impl Related<super::reposts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reposts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::posts::Entity> for Entity {
    fn to() -> RelationDef {
        super::posts_mentions::Relation::Posts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::posts_mentions::Relation::Accounts.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
