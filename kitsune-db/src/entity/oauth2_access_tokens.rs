//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "oauth2_access_tokens")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub token: String,
    pub user_id: Option<Uuid>,
    pub application_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
    pub expired_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::oauth2_applications::Entity",
        from = "Column::ApplicationId",
        to = "super::oauth2_applications::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Oauth2Applications,
    #[sea_orm(has_one = "super::oauth2_refresh_tokens::Entity")]
    Oauth2RefreshTokens,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::oauth2_applications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2Applications.def()
    }
}

impl Related<super::oauth2_refresh_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Oauth2RefreshTokens.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
