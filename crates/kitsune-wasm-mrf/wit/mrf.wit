package fep:mrf@0.1.0;

/// Home-grown version of an interface for doing HTTP requests
interface http-client {
    /// Opaque representation of some error
    resource error {}

    /// HTTP request
    record request {
        /// The URL to send the request to
        url: string,

        /// The method to use for the request
        method: string,

        /// The headers to send with the request
        headers: list<tuple<string, string>>,

        /// The body of the request
        body: option<list<u8>>,
    }

    /// HTTP response
    record response {
        /// The status code of the response
        status: u16,

        /// The headers of the response
        headers: list<tuple<string, string>>,

        /// The body of the response
        body: response-body,
    }

    /// The body of the response
    resource response-body {
        /// Get the next chunk of the body
        next: func() -> result<option<list<u8>>, error>;
    }

    /// Perform an HTTP request
    do-request: func(request: request) -> result<response, error>;

    /// Perform an HTTP request but sign it with the instance actor beforehand
    /// 
    /// This is required for some fediverse instances to download things like remote actors
    do-request-signed: func(request: request) -> result<response, error>;
}

/// Home-grown version of wasi-keyvalue
/// 
/// Built around a synchronous interface since MRFs are synchronous in their current representation
interface keyvalue {
    /// Opaque representation of some error
    resource error {}

    /// Logical collection of Key-Value pairs
    resource bucket {
        /// Open or create a new bucket
        open: static func(name: string) -> result<bucket, error>;

         /// Get a value from a bucket
        get: func(key: string) -> result<option<list<u8>>, error>;

        /// Set the value inside a bucket
        /// 
        /// Overwrites existing values silently
        set: func(key: string, value: list<u8>) -> result<_, error>;

        /// Delete the value from a bucket
        delete: func(key: string) -> result<_, error>;

        /// Check if a key exists in the bucket
        exists: func(key: string) -> result<bool, error>;
    }
}

interface types {
    /// The direction the activity is going
    enum direction {
        /// The activity is being received
        incoming,

        /// The activity is being sent out
        outgoing,
    }

    /// Error types
    variant error {
        /// Reject the activity
        reject,

        /// An error occurred but the processing can continue
        error-continue(string),

        /// An error occurred and the processing should not continue
        error-reject(string),
    }
}

world mrf {
    use types.{direction, error};

    import http-client;
    import keyvalue;
    import wasi:logging/logging;

    /// Transform an ActivityPub activity
    export transform: func(configuration: string, direction: direction, activity: string) -> result<string, error>;
}
